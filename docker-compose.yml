version: '3.8'

services:
  # MCP Analytics Server
  analytics-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: analytics-mcp-server
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - DEBUG=false
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://analytics:password@postgres:5432/analytics_db
      - API_KEY_SECRET=${API_KEY_SECRET:-your-secret-key}
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - DATA_PATH=/app/data
      - CACHE_TTL=3600
      - LOG_LEVEL=info
    volumes:
      - ./server/data:/app/data:ro
      - analytics-logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for metadata and user management (optional)
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=analytics_db
      - POSTGRES_USER=analytics
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics -d analytics_db"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: analytics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - analytics-server
    restart: unless-stopped
    networks:
      - analytics-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: analytics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - analytics-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: analytics-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana/dashboards:/etc/grafana/dashboards:ro
      - ./deploy/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
      - ./deploy/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - analytics-network

networks:
  analytics-network:
    driver: bridge
    name: analytics-network

volumes:
  redis-data:
    name: analytics-redis-data
  postgres-data:
    name: analytics-postgres-data
  analytics-logs:
    name: analytics-logs
  nginx-logs:
    name: analytics-nginx-logs
  prometheus-data:
    name: analytics-prometheus-data
  grafana-data:
    name: analytics-grafana-data